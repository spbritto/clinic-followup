generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Multi-tenant: cada usuário pertence a uma clínica
model Clinic {
  id        String @id @default(cuid())
  name      String
  createdAt DateTime @default(now())

  users     User[]
  patients  Patient[]
  encounters Encounter[]
  followUpPlans FollowUpPlan[]
}

// Usuário do sistema (vamos usar depois no NextAuth)
model User {
  id           String   @id @default(cuid())
  name         String?
  email        String   @unique
  passwordHash String
  role         Role     @default(PRACTITIONER)
  clinicId     String
  clinic       Clinic   @relation(fields: [clinicId], references: [id])
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@index([clinicId])
}

// papéis básicos
enum Role {
  ADMIN
  PRACTITIONER
  ASSISTANT
}

model Patient {
  id        String   @id @default(cuid())
  clinicId  String
  clinic    Clinic   @relation(fields: [clinicId], references: [id])
  name      String
  birthdate DateTime?
  phone     String?
  email     String?
  tags      String[] @default([])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  encounters     Encounter[]
  followUpPlans  FollowUpPlan[]

  @@index([clinicId])
}

model Encounter {
  id         String   @id @default(cuid())
  clinicId   String
  clinic     Clinic   @relation(fields: [clinicId], references: [id])
  patientId  String
  patient    Patient  @relation(fields: [patientId], references: [id])
  date       DateTime @default(now())
  type       EncounterType @default(CHECKIN) // consulta ou checkin
  notes      String?

  createdAt  DateTime @default(now())

  @@index([clinicId, patientId])
}

model FollowUpPlan {
  id               String   @id @default(cuid())
  clinicId         String
  clinic           Clinic   @relation(fields: [clinicId], references: [id])
  patientId        String
  patient          Patient  @relation(fields: [patientId], references: [id])

  cadenceDays      Int      @default(7) // periodicidade do check-in
  lastContactAt    DateTime?
  nextContactAt    DateTime?
  status           FollowUpStatus @default(OK)
  pendingAdjustments String?

  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  @@index([clinicId, patientId])
}

enum EncounterType {
  CONSULTA
  CHECKIN
}

enum FollowUpStatus {
  OK
  DUE
  OVERDUE
}